
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BEG_BRACE BEG_PAREN COLON COMMA DIVISION END_BRACE END_PAREN EQUALS GREATER ID LESS MINUS MOD NUMBER PLUS POWER QUOTATION_MARKS SEMICOLON STRING TIMES break case chan const continue default defer else fallthrough for func go goto if import interface map package range return select struct switch type var exp : soma \n        | sub \n        | exp1 soma : exp PLUS exp1sub : exp MINUS exp1exp1 : mult \n       | div \n       | exp2mult : exp1 TIMES exp2div : exp1 DIVISION exp2exp2 : ID\n        | NUMBER \n        | STRING \n        | exp3 exp3 : BEG_PAREN exp END_PAREN'
    
_lr_action_items = {'ID':([0,12,13,14,15,16,],[8,8,8,8,8,8,]),'NUMBER':([0,12,13,14,15,16,],[9,9,9,9,9,9,]),'STRING':([0,12,13,14,15,16,],[10,10,10,10,10,10,]),'BEG_PAREN':([0,12,13,14,15,16,],[12,12,12,12,12,12,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,18,19,20,21,22,],[0,-1,-2,-3,-6,-7,-8,-11,-12,-13,-14,-4,-5,-9,-10,-15,]),'PLUS':([1,2,3,4,5,6,7,8,9,10,11,17,18,19,20,21,22,],[13,-1,-2,-3,-6,-7,-8,-11,-12,-13,-14,13,-4,-5,-9,-10,-15,]),'MINUS':([1,2,3,4,5,6,7,8,9,10,11,17,18,19,20,21,22,],[14,-1,-2,-3,-6,-7,-8,-11,-12,-13,-14,14,-4,-5,-9,-10,-15,]),'END_PAREN':([2,3,4,5,6,7,8,9,10,11,17,18,19,20,21,22,],[-1,-2,-3,-6,-7,-8,-11,-12,-13,-14,22,-4,-5,-9,-10,-15,]),'TIMES':([4,5,6,7,8,9,10,11,18,19,20,21,22,],[15,-6,-7,-8,-11,-12,-13,-14,15,15,-9,-10,-15,]),'DIVISION':([4,5,6,7,8,9,10,11,18,19,20,21,22,],[16,-6,-7,-8,-11,-12,-13,-14,16,16,-9,-10,-15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'exp':([0,12,],[1,17,]),'soma':([0,12,],[2,2,]),'sub':([0,12,],[3,3,]),'exp1':([0,12,13,14,],[4,4,18,19,]),'mult':([0,12,13,14,],[5,5,5,5,]),'div':([0,12,13,14,],[6,6,6,6,]),'exp2':([0,12,13,14,15,16,],[7,7,7,7,20,21,]),'exp3':([0,12,13,14,15,16,],[11,11,11,11,11,11,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> exp","S'",1,None,None,None),
  ('exp -> soma','exp',1,'p_exp_exp','analiseSintatica.py',6),
  ('exp -> sub','exp',1,'p_exp_exp','analiseSintatica.py',7),
  ('exp -> exp1','exp',1,'p_exp_exp','analiseSintatica.py',8),
  ('soma -> exp PLUS exp1','soma',3,'p_exp_soma','analiseSintatica.py',12),
  ('sub -> exp MINUS exp1','sub',3,'p_exp_sub','analiseSintatica.py',16),
  ('exp1 -> mult','exp1',1,'p_exp1','analiseSintatica.py',20),
  ('exp1 -> div','exp1',1,'p_exp1','analiseSintatica.py',21),
  ('exp1 -> exp2','exp1',1,'p_exp1','analiseSintatica.py',22),
  ('mult -> exp1 TIMES exp2','mult',3,'p_exp_mult','analiseSintatica.py',26),
  ('div -> exp1 DIVISION exp2','div',3,'p_exp_div','analiseSintatica.py',30),
  ('exp2 -> ID','exp2',1,'p_exp_exp2','analiseSintatica.py',34),
  ('exp2 -> NUMBER','exp2',1,'p_exp_exp2','analiseSintatica.py',35),
  ('exp2 -> STRING','exp2',1,'p_exp_exp2','analiseSintatica.py',36),
  ('exp2 -> exp3','exp2',1,'p_exp_exp2','analiseSintatica.py',37),
  ('exp3 -> BEG_PAREN exp END_PAREN','exp3',3,'p_exp_exp3','analiseSintatica.py',40),
]
