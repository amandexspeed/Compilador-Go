
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programaAMPERSAND BEG_BRACE BEG_PAREN BREAK COLON COMMA CONST DECREMENT DIFFERENT DIVISION ELSE END_BRACE END_PAREN EQUALS EXCLAMATION FALSE FOR FUNC GREATER ID IF IMPORT INCREMENT LESS MINUS MOD NEWLINE NUMBER PACKAGE PIPE PLUS POWER QUOTATION_MARKS RETURN SEMICOLON STRING TIMES TRUE VARprograma : pacote importacao declaracaoGlobal funcoes_codigoempty :pacote : PACKAGE ID delimitador \n              | PACKAGE ID NEWLINEimportacao : IMPORT STRING NEWLINE importacao\n                  | IMPORT STRING delimitador importacao\n                  | emptydeclaracaoGlobal : regrasDeclaracaoGlobal\n                        | regrasDeclaracaoGlobal NEWLINE\n                        | emptyregrasDeclaracaoGlobal : declaracaoGlobalSimples\n                              | declaracaoEmLista\n                              | declaracaoEmListaEspacadadeclaracaoGlobalSimples : VAR tiposDeclaracoesGlobaistiposDeclaracoesGlobais : declaracaoGlobalSemValor\n                               | declaracaoGlobalComValordeclaracaoGlobalSemValor : ID IDdeclaracaoGlobalComValor : ID ID EQUALS constantedeclaracaoEmLista : VAR BEG_PAREN listaGlobal END_PARENdeclaracaoEmListaEspacada : VAR BEG_PAREN NEWLINE listaGlobal END_PARENlistaGlobal : tiposDeclaracoesGlobais\n                   | listaGlobalRecursiva\n                   | tiposDeclaracoesGlobais NEWLINElistaGlobalRecursiva : tiposDeclaracoesGlobais NEWLINE listaGlobalfuncoes_codigo : funcao delimitador funcoes_codigo\n                      | funcao NEWLINE funcoes_codigo\n                      | funcao\n                      | emptyfuncao : FUNC ID BEG_PAREN lista_parametros END_PAREN tipo_retorno BEG_BRACE codigo END_BRACEtipo_retorno : ID\n                    | emptycodigo : lista_estruturaslista_estruturas : lista_estruturas estruturasBase\n                        | emptyestruturasBase : estruturas SEMICOLON\n                      | estruturas NEWLINE\n                      | NEWLINEestruturas : atribuicao\n                  | declaracao\n                  | estrutura_if\n                  | estrutura_for\n                  | unario\n                  | chamadaFuncaodelimitador  : SEMICOLON\n                    | SEMICOLON NEWLINEexpressao : and\n                 | or\n                 | expressao_n2and : expressao AMPERSAND AMPERSAND expressao_n2or : expressao PIPE PIPE expressao_n2expressao_n2 : equals\n                    | different\n                    | greater\n                    | less\n                    | greater_or_equal\n                    | less_or_equal\n                    | expressao_n3equals : expressao_n2 EQUALS EQUALS expressao_n3different : expressao_n3 DIFFERENT expressao_n3greater : expressao_n2 GREATER expressao_n3less : expressao_n2 LESS expressao_n3greater_or_equal : expressao_n2 GREATER EQUALS expressao_n3less_or_equal : expressao_n2 LESS EQUALS expressao_n3 expressao_n3 : soma \n                     | sub \n                     | expressao_n4 soma : expressao_n3 PLUS expressao_n4sub : expressao_n3 MINUS expressao_n4 expressao_n4 : mult \n                     | div \n                     | mod \n                     | expressao_n5 mult : expressao_n4 TIMES expressao_n5mod : expressao_n4 MOD expressao_n5div : expressao_n4 DIVISION expressao_n5expressao_n5 : unario\n                    | operando\n                    | negation unario : incremento\n               | decremento\n               | pre_incremento\n               | pre_decrementonegation : EXCLAMATION operandoincremento : ID INCREMENTpre_incremento : INCREMENT IDdecremento : ID DECREMENTpre_decremento : DECREMENT IDoperando : identificador\n                | constante\n                | chamadaFuncao\n                | expParentesesconstante : NUMBER\n                 | STRING\n                 | TRUE\n                 | FALSEidentificador : IDexpParenteses : BEG_PAREN expressao END_PARENestrutura_for : for_CLIKE\n                     | for_infinito\n                     | for_whilefor_CLIKE : FOR declaracao SEMICOLON expressao SEMICOLON expressao BEG_BRACE codigo END_BRACEfor_infinito : FOR BEG_BRACE codigo END_BRACEfor_while : FOR expressao BEG_BRACE codigo END_BRACEestrutura_if : IF expressao BEG_BRACE codigo END_BRACE estrutura_else\n                    | IF expressao BEG_BRACE codigo END_BRACEestrutura_else : ELSE BEG_BRACE codigo END_BRACE\n                      | ELSE estrutura_ifatribuicao : lista_identificadores EQUALS lista_valores\n                  | expressao_matematica_reduzidaexpressao_matematica_reduzida : assign_plus\n                                     | assign_minus\n                                     | assign_mult\n                                     | assign_divassign_plus : ID PLUS EQUALS expressaoassign_minus : ID MINUS EQUALS expressaoassign_mult : ID TIMES EQUALS expressaoassign_div : ID DIVISION EQUALS expressaodeclaracao : lista_identificadores COLON EQUALS lista_valoreschamadaFuncao : ID BEG_PAREN lista_parametros END_PARENlista_parametros : lista_identificadores\n                        | emptylista_identificadores : lista_identificadores COMMA ID\n                             | IDlista_valores : lista_valores COMMA expressao\n                    | expressao'
    
_lr_action_items = {'PACKAGE':([0,],[3,]),'$end':([1,2,4,6,8,9,10,11,12,13,16,17,18,19,20,21,23,24,26,27,29,30,31,32,33,39,40,41,42,43,45,53,55,56,57,58,59,70,],[0,-2,-2,-7,-2,-8,-10,-11,-12,-13,-3,-4,-44,-1,-27,-28,-9,-14,-15,-16,-2,-2,-45,-2,-2,-17,-5,-6,-25,-26,-19,-20,-18,-92,-93,-94,-95,-29,]),'IMPORT':([2,16,17,18,29,30,31,],[5,-3,-4,-44,5,5,-45,]),'VAR':([2,4,6,16,17,18,29,30,31,40,41,],[-2,14,-7,-3,-4,-44,-2,-2,-45,-5,-6,]),'FUNC':([2,4,6,8,9,10,11,12,13,16,17,18,23,24,26,27,29,30,31,32,33,39,40,41,45,53,55,56,57,58,59,],[-2,-2,-7,22,-8,-10,-11,-12,-13,-3,-4,-44,-9,-14,-15,-16,-2,-2,-45,22,22,-17,-5,-6,-19,-20,-18,-92,-93,-94,-95,]),'ID':([3,14,22,25,28,36,44,47,60,61,66,68,69,71,73,82,95,96,97,98,99,100,127,129,130,139,146,147,151,152,153,154,155,156,157,158,163,164,165,166,167,168,170,173,174,175,177,179,202,207,209,],[7,28,34,28,39,28,49,28,62,65,-2,90,-34,-33,-37,128,141,142,143,-35,-36,128,160,128,49,-2,128,-2,128,128,128,128,128,128,128,128,128,128,128,128,128,-2,128,128,128,128,128,128,128,-2,-2,]),'STRING':([5,48,82,95,100,127,129,146,151,152,153,154,155,156,157,158,163,164,165,166,167,170,173,174,175,177,179,202,],[15,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'NEWLINE':([7,9,11,12,13,15,18,20,24,25,26,27,37,39,45,53,55,56,57,58,59,66,68,69,70,71,72,73,74,75,76,77,78,79,81,83,84,85,86,87,88,89,91,92,93,94,98,99,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,131,132,139,142,143,144,145,147,159,160,168,171,176,178,180,181,182,183,184,185,186,187,188,189,190,191,194,195,196,197,198,199,200,201,203,204,207,208,209,212,213,],[17,23,-11,-12,-13,29,31,33,-14,36,-15,-16,47,-17,-19,-20,-18,-92,-93,-94,-95,-2,73,-34,-29,-33,99,-37,-38,-39,-40,-41,-42,-43,-109,-98,-99,-100,-79,-80,-81,-82,-110,-111,-112,-113,-35,-36,-46,-47,-48,-51,-52,-53,-54,-55,-56,-57,-64,-65,-66,-69,-70,-71,-72,-76,-77,-78,-88,-89,-90,-91,-96,-84,-86,-2,-85,-87,-108,-125,-2,-83,-96,-2,-118,-60,-61,-59,-67,-68,-73,-75,-74,-97,-119,-114,-115,-116,-117,-102,-124,-105,-49,-50,-58,-62,-63,-103,-104,-2,-107,-2,-106,-101,]),'SEMICOLON':([7,15,20,56,57,58,59,70,72,74,75,76,77,78,79,81,83,84,85,86,87,88,89,91,92,93,94,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,131,132,137,142,143,144,145,159,160,171,176,178,180,181,182,183,184,185,186,187,188,189,190,191,192,194,195,196,197,198,199,200,201,203,204,208,212,213,],[18,18,18,-92,-93,-94,-95,-29,98,-38,-39,-40,-41,-42,-43,-109,-98,-99,-100,-79,-80,-81,-82,-110,-111,-112,-113,-46,-47,-48,-51,-52,-53,-54,-55,-56,-57,-64,-65,-66,-69,-70,-71,-72,-76,-77,-78,-88,-89,-90,-91,-96,-84,-86,167,-85,-87,-108,-125,-83,-96,-118,-60,-61,-59,-67,-68,-73,-75,-74,-97,-119,-114,-115,-116,-117,202,-102,-124,-105,-49,-50,-58,-62,-63,-103,-104,-107,-106,-101,]),'BEG_PAREN':([14,34,82,90,95,100,127,128,129,141,146,151,152,153,154,155,156,157,158,160,163,164,165,166,167,170,173,174,175,177,179,202,],[25,44,129,130,129,129,129,130,129,130,129,129,129,129,129,129,129,129,129,130,129,129,129,129,129,129,129,129,129,129,129,129,]),'END_PAREN':([26,27,35,37,38,39,44,46,47,49,50,51,52,54,55,56,57,58,59,65,86,87,88,89,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,130,131,132,142,143,159,160,161,162,176,178,180,181,182,183,184,185,186,187,197,198,199,200,201,],[-15,-16,45,-21,-22,-17,-2,53,-23,-123,60,-120,-121,-24,-18,-92,-93,-94,-95,-122,-79,-80,-81,-82,-46,-47,-48,-51,-52,-53,-54,-55,-56,-57,-64,-65,-66,-69,-70,-71,-72,-76,-77,-78,-88,-89,-90,-91,-96,-2,-84,-86,-85,-87,-83,-96,186,187,-60,-61,-59,-67,-68,-73,-75,-74,-97,-119,-49,-50,-58,-62,-63,]),'EQUALS':([39,56,57,58,59,65,80,86,87,88,89,90,101,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,131,132,133,134,135,136,141,142,143,150,151,152,159,160,176,178,180,181,182,183,184,185,186,187,197,198,199,200,201,],[48,-92,-93,-94,-95,-122,100,-79,-80,-81,-82,-123,146,150,-51,-52,-53,-54,-55,-56,-57,-64,-65,-66,-69,-70,-71,-72,-76,-77,-78,-88,-89,-90,-91,-96,-84,-86,163,164,165,166,-96,-85,-87,175,177,179,-83,-96,-60,-61,-59,-67,-68,-73,-75,-74,-97,-119,150,150,-58,-62,-63,]),'NUMBER':([48,82,95,100,127,129,146,151,152,153,154,155,156,157,158,163,164,165,166,167,170,173,174,175,177,179,202,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'TRUE':([48,82,95,100,127,129,146,151,152,153,154,155,156,157,158,163,164,165,166,167,170,173,174,175,177,179,202,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'FALSE':([48,82,95,100,127,129,146,151,152,153,154,155,156,157,158,163,164,165,166,167,170,173,174,175,177,179,202,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'COMMA':([49,51,56,57,58,59,65,80,86,87,88,89,90,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,131,132,140,141,142,143,144,145,159,160,171,176,178,180,181,182,183,184,185,186,187,195,197,198,199,200,201,],[-123,61,-92,-93,-94,-95,-122,61,-79,-80,-81,-82,-123,-46,-47,-48,-51,-52,-53,-54,-55,-56,-57,-64,-65,-66,-69,-70,-71,-72,-76,-77,-78,-88,-89,-90,-91,-96,-84,-86,61,-123,-85,-87,170,-125,-83,-96,170,-60,-61,-59,-67,-68,-73,-75,-74,-97,-119,-124,-49,-50,-58,-62,-63,]),'TIMES':([56,57,58,59,86,87,88,89,90,115,116,117,118,119,120,121,122,123,124,125,126,128,131,132,141,142,143,159,160,181,182,183,184,185,186,187,],[-92,-93,-94,-95,-79,-80,-81,-82,135,156,-69,-70,-71,-72,-76,-77,-78,-88,-89,-90,-91,-96,-84,-86,-96,-85,-87,-83,-96,156,156,-73,-75,-74,-97,-119,]),'DIVISION':([56,57,58,59,86,87,88,89,90,115,116,117,118,119,120,121,122,123,124,125,126,128,131,132,141,142,143,159,160,181,182,183,184,185,186,187,],[-92,-93,-94,-95,-79,-80,-81,-82,136,157,-69,-70,-71,-72,-76,-77,-78,-88,-89,-90,-91,-96,-84,-86,-96,-85,-87,-83,-96,157,157,-73,-75,-74,-97,-119,]),'MOD':([56,57,58,59,86,87,88,89,115,116,117,118,119,120,121,122,123,124,125,126,128,131,132,141,142,143,159,160,181,182,183,184,185,186,187,],[-92,-93,-94,-95,-79,-80,-81,-82,158,-69,-70,-71,-72,-76,-77,-78,-88,-89,-90,-91,-96,-84,-86,-96,-85,-87,-83,-96,158,158,-73,-75,-74,-97,-119,]),'DIFFERENT':([56,57,58,59,86,87,88,89,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,131,132,141,142,143,159,160,181,182,183,184,185,186,187,],[-92,-93,-94,-95,-79,-80,-81,-82,153,-64,-65,-66,-69,-70,-71,-72,-76,-77,-78,-88,-89,-90,-91,-96,-84,-86,-96,-85,-87,-83,-96,-67,-68,-73,-75,-74,-97,-119,]),'PLUS':([56,57,58,59,86,87,88,89,90,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,131,132,141,142,143,159,160,176,178,180,181,182,183,184,185,186,187,199,200,201,],[-92,-93,-94,-95,-79,-80,-81,-82,133,154,-64,-65,-66,-69,-70,-71,-72,-76,-77,-78,-88,-89,-90,-91,-96,-84,-86,-96,-85,-87,-83,-96,154,154,154,-67,-68,-73,-75,-74,-97,-119,154,154,154,]),'MINUS':([56,57,58,59,86,87,88,89,90,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,131,132,141,142,143,159,160,176,178,180,181,182,183,184,185,186,187,199,200,201,],[-92,-93,-94,-95,-79,-80,-81,-82,134,155,-64,-65,-66,-69,-70,-71,-72,-76,-77,-78,-88,-89,-90,-91,-96,-84,-86,-96,-85,-87,-83,-96,155,155,155,-67,-68,-73,-75,-74,-97,-119,155,155,155,]),'GREATER':([56,57,58,59,86,87,88,89,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,131,132,141,142,143,159,160,176,178,180,181,182,183,184,185,186,187,197,198,199,200,201,],[-92,-93,-94,-95,-79,-80,-81,-82,151,-51,-52,-53,-54,-55,-56,-57,-64,-65,-66,-69,-70,-71,-72,-76,-77,-78,-88,-89,-90,-91,-96,-84,-86,-96,-85,-87,-83,-96,-60,-61,-59,-67,-68,-73,-75,-74,-97,-119,151,151,-58,-62,-63,]),'LESS':([56,57,58,59,86,87,88,89,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,131,132,141,142,143,159,160,176,178,180,181,182,183,184,185,186,187,197,198,199,200,201,],[-92,-93,-94,-95,-79,-80,-81,-82,152,-51,-52,-53,-54,-55,-56,-57,-64,-65,-66,-69,-70,-71,-72,-76,-77,-78,-88,-89,-90,-91,-96,-84,-86,-96,-85,-87,-83,-96,-60,-61,-59,-67,-68,-73,-75,-74,-97,-119,152,152,-58,-62,-63,]),'BEG_BRACE':([56,57,58,59,60,62,63,64,86,87,88,89,95,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,131,132,138,141,142,143,159,160,176,178,180,181,182,183,184,185,186,187,197,198,199,200,201,205,206,],[-92,-93,-94,-95,-2,-30,66,-31,-79,-80,-81,-82,139,147,-46,-47,-48,-51,-52,-53,-54,-55,-56,-57,-64,-65,-66,-69,-70,-71,-72,-76,-77,-78,-88,-89,-90,-91,-96,-84,-86,168,-96,-85,-87,-83,-96,-60,-61,-59,-67,-68,-73,-75,-74,-97,-119,-49,-50,-58,-62,-63,207,209,]),'AMPERSAND':([56,57,58,59,86,87,88,89,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,131,132,138,141,142,143,145,148,159,160,161,176,178,180,181,182,183,184,185,186,187,188,189,190,191,192,195,197,198,199,200,201,206,],[-92,-93,-94,-95,-79,-80,-81,-82,148,-46,-47,-48,-51,-52,-53,-54,-55,-56,-57,-64,-65,-66,-69,-70,-71,-72,-76,-77,-78,-88,-89,-90,-91,-96,-84,-86,148,-96,-85,-87,148,173,-83,-96,148,-60,-61,-59,-67,-68,-73,-75,-74,-97,-119,148,148,148,148,148,148,-49,-50,-58,-62,-63,148,]),'PIPE':([56,57,58,59,86,87,88,89,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,131,132,138,141,142,143,145,149,159,160,161,176,178,180,181,182,183,184,185,186,187,188,189,190,191,192,195,197,198,199,200,201,206,],[-92,-93,-94,-95,-79,-80,-81,-82,149,-46,-47,-48,-51,-52,-53,-54,-55,-56,-57,-64,-65,-66,-69,-70,-71,-72,-76,-77,-78,-88,-89,-90,-91,-96,-84,-86,149,-96,-85,-87,149,174,-83,-96,149,-60,-61,-59,-67,-68,-73,-75,-74,-97,-119,149,149,149,149,149,149,-49,-50,-58,-62,-63,149,]),'COLON':([65,80,90,140,141,],[-122,101,-123,101,-123,]),'IF':([66,68,69,71,73,98,99,139,147,168,205,207,209,],[-2,82,-34,-33,-37,-35,-36,-2,-2,-2,82,-2,-2,]),'FOR':([66,68,69,71,73,98,99,139,147,168,207,209,],[-2,95,-34,-33,-37,-35,-36,-2,-2,-2,-2,-2,]),'INCREMENT':([66,68,69,71,73,82,90,95,98,99,100,128,129,139,141,146,147,151,152,153,154,155,156,157,158,163,164,165,166,167,168,170,173,174,175,177,179,202,207,209,],[-2,96,-34,-33,-37,96,131,96,-35,-36,96,131,96,-2,131,96,-2,96,96,96,96,96,96,96,96,96,96,96,96,96,-2,96,96,96,96,96,96,96,-2,-2,]),'DECREMENT':([66,68,69,71,73,82,90,95,98,99,100,128,129,139,141,146,147,151,152,153,154,155,156,157,158,163,164,165,166,167,168,170,173,174,175,177,179,202,207,209,],[-2,97,-34,-33,-37,97,132,97,-35,-36,97,132,97,-2,132,97,-2,97,97,97,97,97,97,97,97,97,97,97,97,97,-2,97,97,97,97,97,97,97,-2,-2,]),'END_BRACE':([66,67,68,69,71,73,98,99,139,147,168,169,172,193,207,209,210,211,],[-2,70,-32,-34,-33,-37,-35,-36,-2,-2,-2,194,196,203,-2,-2,212,213,]),'EXCLAMATION':([82,95,100,129,146,151,152,153,154,155,156,157,158,163,164,165,166,167,170,173,174,175,177,179,202,],[127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,]),'ELSE':([196,],[205,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'pacote':([0,],[2,]),'importacao':([2,29,30,],[4,40,41,]),'empty':([2,4,8,29,30,32,33,44,60,66,130,139,147,168,207,209,],[6,10,21,6,6,21,21,52,64,69,52,69,69,69,69,69,]),'declaracaoGlobal':([4,],[8,]),'regrasDeclaracaoGlobal':([4,],[9,]),'declaracaoGlobalSimples':([4,],[11,]),'declaracaoEmLista':([4,],[12,]),'declaracaoEmListaEspacada':([4,],[13,]),'delimitador':([7,15,20,],[16,30,32,]),'funcoes_codigo':([8,32,33,],[19,42,43,]),'funcao':([8,32,33,],[20,20,20,]),'tiposDeclaracoesGlobais':([14,25,36,47,],[24,37,37,37,]),'declaracaoGlobalSemValor':([14,25,36,47,],[26,26,26,26,]),'declaracaoGlobalComValor':([14,25,36,47,],[27,27,27,27,]),'listaGlobal':([25,36,47,],[35,46,54,]),'listaGlobalRecursiva':([25,36,47,],[38,38,38,]),'lista_parametros':([44,130,],[50,162,]),'lista_identificadores':([44,68,95,130,],[51,80,140,51,]),'constante':([48,82,95,100,127,129,146,151,152,153,154,155,156,157,158,163,164,165,166,167,170,173,174,175,177,179,202,],[55,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,]),'tipo_retorno':([60,],[63,]),'codigo':([66,139,147,168,207,209,],[67,169,172,193,210,211,]),'lista_estruturas':([66,139,147,168,207,209,],[68,68,68,68,68,68,]),'estruturasBase':([68,],[71,]),'estruturas':([68,],[72,]),'atribuicao':([68,],[74,]),'declaracao':([68,95,],[75,137,]),'estrutura_if':([68,205,],[76,208,]),'estrutura_for':([68,],[77,]),'unario':([68,82,95,100,129,146,151,152,153,154,155,156,157,158,163,164,165,166,167,170,173,174,175,177,179,202,],[78,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,]),'chamadaFuncao':([68,82,95,100,127,129,146,151,152,153,154,155,156,157,158,163,164,165,166,167,170,173,174,175,177,179,202,],[79,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,]),'expressao_matematica_reduzida':([68,],[81,]),'for_CLIKE':([68,],[83,]),'for_infinito':([68,],[84,]),'for_while':([68,],[85,]),'incremento':([68,82,95,100,129,146,151,152,153,154,155,156,157,158,163,164,165,166,167,170,173,174,175,177,179,202,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'decremento':([68,82,95,100,129,146,151,152,153,154,155,156,157,158,163,164,165,166,167,170,173,174,175,177,179,202,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'pre_incremento':([68,82,95,100,129,146,151,152,153,154,155,156,157,158,163,164,165,166,167,170,173,174,175,177,179,202,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'pre_decremento':([68,82,95,100,129,146,151,152,153,154,155,156,157,158,163,164,165,166,167,170,173,174,175,177,179,202,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'assign_plus':([68,],[91,]),'assign_minus':([68,],[92,]),'assign_mult':([68,],[93,]),'assign_div':([68,],[94,]),'expressao':([82,95,100,129,146,163,164,165,166,167,170,202,],[102,138,145,161,145,188,189,190,191,192,195,206,]),'and':([82,95,100,129,146,163,164,165,166,167,170,202,],[103,103,103,103,103,103,103,103,103,103,103,103,]),'or':([82,95,100,129,146,163,164,165,166,167,170,202,],[104,104,104,104,104,104,104,104,104,104,104,104,]),'expressao_n2':([82,95,100,129,146,163,164,165,166,167,170,173,174,202,],[105,105,105,105,105,105,105,105,105,105,105,197,198,105,]),'equals':([82,95,100,129,146,163,164,165,166,167,170,173,174,202,],[106,106,106,106,106,106,106,106,106,106,106,106,106,106,]),'different':([82,95,100,129,146,163,164,165,166,167,170,173,174,202,],[107,107,107,107,107,107,107,107,107,107,107,107,107,107,]),'greater':([82,95,100,129,146,163,164,165,166,167,170,173,174,202,],[108,108,108,108,108,108,108,108,108,108,108,108,108,108,]),'less':([82,95,100,129,146,163,164,165,166,167,170,173,174,202,],[109,109,109,109,109,109,109,109,109,109,109,109,109,109,]),'greater_or_equal':([82,95,100,129,146,163,164,165,166,167,170,173,174,202,],[110,110,110,110,110,110,110,110,110,110,110,110,110,110,]),'less_or_equal':([82,95,100,129,146,163,164,165,166,167,170,173,174,202,],[111,111,111,111,111,111,111,111,111,111,111,111,111,111,]),'expressao_n3':([82,95,100,129,146,151,152,153,163,164,165,166,167,170,173,174,175,177,179,202,],[112,112,112,112,112,176,178,180,112,112,112,112,112,112,112,112,199,200,201,112,]),'soma':([82,95,100,129,146,151,152,153,163,164,165,166,167,170,173,174,175,177,179,202,],[113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,]),'sub':([82,95,100,129,146,151,152,153,163,164,165,166,167,170,173,174,175,177,179,202,],[114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,]),'expressao_n4':([82,95,100,129,146,151,152,153,154,155,163,164,165,166,167,170,173,174,175,177,179,202,],[115,115,115,115,115,115,115,115,181,182,115,115,115,115,115,115,115,115,115,115,115,115,]),'mult':([82,95,100,129,146,151,152,153,154,155,163,164,165,166,167,170,173,174,175,177,179,202,],[116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,]),'div':([82,95,100,129,146,151,152,153,154,155,163,164,165,166,167,170,173,174,175,177,179,202,],[117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,]),'mod':([82,95,100,129,146,151,152,153,154,155,163,164,165,166,167,170,173,174,175,177,179,202,],[118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,]),'expressao_n5':([82,95,100,129,146,151,152,153,154,155,156,157,158,163,164,165,166,167,170,173,174,175,177,179,202,],[119,119,119,119,119,119,119,119,119,119,183,184,185,119,119,119,119,119,119,119,119,119,119,119,119,]),'operando':([82,95,100,127,129,146,151,152,153,154,155,156,157,158,163,164,165,166,167,170,173,174,175,177,179,202,],[121,121,121,159,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,]),'negation':([82,95,100,129,146,151,152,153,154,155,156,157,158,163,164,165,166,167,170,173,174,175,177,179,202,],[122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,]),'identificador':([82,95,100,127,129,146,151,152,153,154,155,156,157,158,163,164,165,166,167,170,173,174,175,177,179,202,],[123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,]),'expParenteses':([82,95,100,127,129,146,151,152,153,154,155,156,157,158,163,164,165,166,167,170,173,174,175,177,179,202,],[126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,]),'lista_valores':([100,146,],[144,171,]),'estrutura_else':([196,],[204,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> pacote importacao declaracaoGlobal funcoes_codigo','programa',4,'p_programa','analiseSintatica.py',12),
  ('empty -> <empty>','empty',0,'p_empty','analiseSintatica.py',16),
  ('pacote -> PACKAGE ID delimitador','pacote',3,'p_pacote','analiseSintatica.py',20),
  ('pacote -> PACKAGE ID NEWLINE','pacote',3,'p_pacote','analiseSintatica.py',21),
  ('importacao -> IMPORT STRING NEWLINE importacao','importacao',4,'p_importacao','analiseSintatica.py',25),
  ('importacao -> IMPORT STRING delimitador importacao','importacao',4,'p_importacao','analiseSintatica.py',26),
  ('importacao -> empty','importacao',1,'p_importacao','analiseSintatica.py',27),
  ('declaracaoGlobal -> regrasDeclaracaoGlobal','declaracaoGlobal',1,'p_declaracaoGlobal','analiseSintatica.py',36),
  ('declaracaoGlobal -> regrasDeclaracaoGlobal NEWLINE','declaracaoGlobal',2,'p_declaracaoGlobal','analiseSintatica.py',37),
  ('declaracaoGlobal -> empty','declaracaoGlobal',1,'p_declaracaoGlobal','analiseSintatica.py',38),
  ('regrasDeclaracaoGlobal -> declaracaoGlobalSimples','regrasDeclaracaoGlobal',1,'p_regrasDeclaracaoGlobal','analiseSintatica.py',42),
  ('regrasDeclaracaoGlobal -> declaracaoEmLista','regrasDeclaracaoGlobal',1,'p_regrasDeclaracaoGlobal','analiseSintatica.py',43),
  ('regrasDeclaracaoGlobal -> declaracaoEmListaEspacada','regrasDeclaracaoGlobal',1,'p_regrasDeclaracaoGlobal','analiseSintatica.py',44),
  ('declaracaoGlobalSimples -> VAR tiposDeclaracoesGlobais','declaracaoGlobalSimples',2,'p_declaracaoGlobalSimples','analiseSintatica.py',48),
  ('tiposDeclaracoesGlobais -> declaracaoGlobalSemValor','tiposDeclaracoesGlobais',1,'p_tiposDeclaracoesGlobais','analiseSintatica.py',52),
  ('tiposDeclaracoesGlobais -> declaracaoGlobalComValor','tiposDeclaracoesGlobais',1,'p_tiposDeclaracoesGlobais','analiseSintatica.py',53),
  ('declaracaoGlobalSemValor -> ID ID','declaracaoGlobalSemValor',2,'p_declaracaoGlobalSemValor','analiseSintatica.py',57),
  ('declaracaoGlobalComValor -> ID ID EQUALS constante','declaracaoGlobalComValor',4,'p_declaracaoGlobalComValor','analiseSintatica.py',61),
  ('declaracaoEmLista -> VAR BEG_PAREN listaGlobal END_PAREN','declaracaoEmLista',4,'p_declaracaoEmLista','analiseSintatica.py',65),
  ('declaracaoEmListaEspacada -> VAR BEG_PAREN NEWLINE listaGlobal END_PAREN','declaracaoEmListaEspacada',5,'p_declaracaoEmListaEspacada','analiseSintatica.py',69),
  ('listaGlobal -> tiposDeclaracoesGlobais','listaGlobal',1,'p_listaGlobal','analiseSintatica.py',73),
  ('listaGlobal -> listaGlobalRecursiva','listaGlobal',1,'p_listaGlobal','analiseSintatica.py',74),
  ('listaGlobal -> tiposDeclaracoesGlobais NEWLINE','listaGlobal',2,'p_listaGlobal','analiseSintatica.py',75),
  ('listaGlobalRecursiva -> tiposDeclaracoesGlobais NEWLINE listaGlobal','listaGlobalRecursiva',3,'p_listaGlobalRecursiva','analiseSintatica.py',82),
  ('funcoes_codigo -> funcao delimitador funcoes_codigo','funcoes_codigo',3,'p_funcoes_codigo','analiseSintatica.py',86),
  ('funcoes_codigo -> funcao NEWLINE funcoes_codigo','funcoes_codigo',3,'p_funcoes_codigo','analiseSintatica.py',87),
  ('funcoes_codigo -> funcao','funcoes_codigo',1,'p_funcoes_codigo','analiseSintatica.py',88),
  ('funcoes_codigo -> empty','funcoes_codigo',1,'p_funcoes_codigo','analiseSintatica.py',89),
  ('funcao -> FUNC ID BEG_PAREN lista_parametros END_PAREN tipo_retorno BEG_BRACE codigo END_BRACE','funcao',9,'p_funcao','analiseSintatica.py',93),
  ('tipo_retorno -> ID','tipo_retorno',1,'p_tipo_retorno','analiseSintatica.py',97),
  ('tipo_retorno -> empty','tipo_retorno',1,'p_tipo_retorno','analiseSintatica.py',98),
  ('codigo -> lista_estruturas','codigo',1,'p_codigo','analiseSintatica.py',102),
  ('lista_estruturas -> lista_estruturas estruturasBase','lista_estruturas',2,'p_lista_estruturas','analiseSintatica.py',106),
  ('lista_estruturas -> empty','lista_estruturas',1,'p_lista_estruturas','analiseSintatica.py',107),
  ('estruturasBase -> estruturas SEMICOLON','estruturasBase',2,'p_estruturasBase','analiseSintatica.py',117),
  ('estruturasBase -> estruturas NEWLINE','estruturasBase',2,'p_estruturasBase','analiseSintatica.py',118),
  ('estruturasBase -> NEWLINE','estruturasBase',1,'p_estruturasBase','analiseSintatica.py',119),
  ('estruturas -> atribuicao','estruturas',1,'p_estruturas','analiseSintatica.py',124),
  ('estruturas -> declaracao','estruturas',1,'p_estruturas','analiseSintatica.py',125),
  ('estruturas -> estrutura_if','estruturas',1,'p_estruturas','analiseSintatica.py',126),
  ('estruturas -> estrutura_for','estruturas',1,'p_estruturas','analiseSintatica.py',127),
  ('estruturas -> unario','estruturas',1,'p_estruturas','analiseSintatica.py',128),
  ('estruturas -> chamadaFuncao','estruturas',1,'p_estruturas','analiseSintatica.py',129),
  ('delimitador -> SEMICOLON','delimitador',1,'p_delimitador','analiseSintatica.py',134),
  ('delimitador -> SEMICOLON NEWLINE','delimitador',2,'p_delimitador','analiseSintatica.py',135),
  ('expressao -> and','expressao',1,'p_expressao','analiseSintatica.py',138),
  ('expressao -> or','expressao',1,'p_expressao','analiseSintatica.py',139),
  ('expressao -> expressao_n2','expressao',1,'p_expressao','analiseSintatica.py',140),
  ('and -> expressao AMPERSAND AMPERSAND expressao_n2','and',4,'p_and','analiseSintatica.py',144),
  ('or -> expressao PIPE PIPE expressao_n2','or',4,'p_or','analiseSintatica.py',148),
  ('expressao_n2 -> equals','expressao_n2',1,'p_expressao_n2','analiseSintatica.py',152),
  ('expressao_n2 -> different','expressao_n2',1,'p_expressao_n2','analiseSintatica.py',153),
  ('expressao_n2 -> greater','expressao_n2',1,'p_expressao_n2','analiseSintatica.py',154),
  ('expressao_n2 -> less','expressao_n2',1,'p_expressao_n2','analiseSintatica.py',155),
  ('expressao_n2 -> greater_or_equal','expressao_n2',1,'p_expressao_n2','analiseSintatica.py',156),
  ('expressao_n2 -> less_or_equal','expressao_n2',1,'p_expressao_n2','analiseSintatica.py',157),
  ('expressao_n2 -> expressao_n3','expressao_n2',1,'p_expressao_n2','analiseSintatica.py',158),
  ('equals -> expressao_n2 EQUALS EQUALS expressao_n3','equals',4,'p_equals','analiseSintatica.py',162),
  ('different -> expressao_n3 DIFFERENT expressao_n3','different',3,'p_different','analiseSintatica.py',166),
  ('greater -> expressao_n2 GREATER expressao_n3','greater',3,'p_greater','analiseSintatica.py',170),
  ('less -> expressao_n2 LESS expressao_n3','less',3,'p_less','analiseSintatica.py',174),
  ('greater_or_equal -> expressao_n2 GREATER EQUALS expressao_n3','greater_or_equal',4,'p_greater_or_equal','analiseSintatica.py',178),
  ('less_or_equal -> expressao_n2 LESS EQUALS expressao_n3','less_or_equal',4,'p_less_or_equal','analiseSintatica.py',182),
  ('expressao_n3 -> soma','expressao_n3',1,'p_expressao_n3','analiseSintatica.py',186),
  ('expressao_n3 -> sub','expressao_n3',1,'p_expressao_n3','analiseSintatica.py',187),
  ('expressao_n3 -> expressao_n4','expressao_n3',1,'p_expressao_n3','analiseSintatica.py',188),
  ('soma -> expressao_n3 PLUS expressao_n4','soma',3,'p_soma','analiseSintatica.py',194),
  ('sub -> expressao_n3 MINUS expressao_n4','sub',3,'p_sub','analiseSintatica.py',198),
  ('expressao_n4 -> mult','expressao_n4',1,'p_expressao_n4','analiseSintatica.py',202),
  ('expressao_n4 -> div','expressao_n4',1,'p_expressao_n4','analiseSintatica.py',203),
  ('expressao_n4 -> mod','expressao_n4',1,'p_expressao_n4','analiseSintatica.py',204),
  ('expressao_n4 -> expressao_n5','expressao_n4',1,'p_expressao_n4','analiseSintatica.py',205),
  ('mult -> expressao_n4 TIMES expressao_n5','mult',3,'p_mult','analiseSintatica.py',211),
  ('mod -> expressao_n4 MOD expressao_n5','mod',3,'p_mod','analiseSintatica.py',215),
  ('div -> expressao_n4 DIVISION expressao_n5','div',3,'p_div','analiseSintatica.py',219),
  ('expressao_n5 -> unario','expressao_n5',1,'p_expressao_n5','analiseSintatica.py',223),
  ('expressao_n5 -> operando','expressao_n5',1,'p_expressao_n5','analiseSintatica.py',224),
  ('expressao_n5 -> negation','expressao_n5',1,'p_expressao_n5','analiseSintatica.py',225),
  ('unario -> incremento','unario',1,'p_unario','analiseSintatica.py',229),
  ('unario -> decremento','unario',1,'p_unario','analiseSintatica.py',230),
  ('unario -> pre_incremento','unario',1,'p_unario','analiseSintatica.py',231),
  ('unario -> pre_decremento','unario',1,'p_unario','analiseSintatica.py',232),
  ('negation -> EXCLAMATION operando','negation',2,'p_negation','analiseSintatica.py',236),
  ('incremento -> ID INCREMENT','incremento',2,'p_incremento','analiseSintatica.py',240),
  ('pre_incremento -> INCREMENT ID','pre_incremento',2,'p_pre_incremento','analiseSintatica.py',244),
  ('decremento -> ID DECREMENT','decremento',2,'p_decremento','analiseSintatica.py',248),
  ('pre_decremento -> DECREMENT ID','pre_decremento',2,'p_pre_decremento','analiseSintatica.py',252),
  ('operando -> identificador','operando',1,'p_operando','analiseSintatica.py',256),
  ('operando -> constante','operando',1,'p_operando','analiseSintatica.py',257),
  ('operando -> chamadaFuncao','operando',1,'p_operando','analiseSintatica.py',258),
  ('operando -> expParenteses','operando',1,'p_operando','analiseSintatica.py',259),
  ('constante -> NUMBER','constante',1,'p_constante','analiseSintatica.py',263),
  ('constante -> STRING','constante',1,'p_constante','analiseSintatica.py',264),
  ('constante -> TRUE','constante',1,'p_constante','analiseSintatica.py',265),
  ('constante -> FALSE','constante',1,'p_constante','analiseSintatica.py',266),
  ('identificador -> ID','identificador',1,'p_identificador','analiseSintatica.py',270),
  ('expParenteses -> BEG_PAREN expressao END_PAREN','expParenteses',3,'p_expParenteses','analiseSintatica.py',277),
  ('estrutura_for -> for_CLIKE','estrutura_for',1,'p_estrutura_for','analiseSintatica.py',281),
  ('estrutura_for -> for_infinito','estrutura_for',1,'p_estrutura_for','analiseSintatica.py',282),
  ('estrutura_for -> for_while','estrutura_for',1,'p_estrutura_for','analiseSintatica.py',283),
  ('for_CLIKE -> FOR declaracao SEMICOLON expressao SEMICOLON expressao BEG_BRACE codigo END_BRACE','for_CLIKE',9,'p_for_CLIKE','analiseSintatica.py',287),
  ('for_infinito -> FOR BEG_BRACE codigo END_BRACE','for_infinito',4,'p_for_infinito','analiseSintatica.py',291),
  ('for_while -> FOR expressao BEG_BRACE codigo END_BRACE','for_while',5,'p_for_while','analiseSintatica.py',295),
  ('estrutura_if -> IF expressao BEG_BRACE codigo END_BRACE estrutura_else','estrutura_if',6,'p_estrutura_if','analiseSintatica.py',300),
  ('estrutura_if -> IF expressao BEG_BRACE codigo END_BRACE','estrutura_if',5,'p_estrutura_if','analiseSintatica.py',301),
  ('estrutura_else -> ELSE BEG_BRACE codigo END_BRACE','estrutura_else',4,'p_estrutura_else','analiseSintatica.py',311),
  ('estrutura_else -> ELSE estrutura_if','estrutura_else',2,'p_estrutura_else','analiseSintatica.py',312),
  ('atribuicao -> lista_identificadores EQUALS lista_valores','atribuicao',3,'p_atribuicao','analiseSintatica.py',322),
  ('atribuicao -> expressao_matematica_reduzida','atribuicao',1,'p_atribuicao','analiseSintatica.py',323),
  ('expressao_matematica_reduzida -> assign_plus','expressao_matematica_reduzida',1,'p_expressao_matematica_reduzida','analiseSintatica.py',330),
  ('expressao_matematica_reduzida -> assign_minus','expressao_matematica_reduzida',1,'p_expressao_matematica_reduzida','analiseSintatica.py',331),
  ('expressao_matematica_reduzida -> assign_mult','expressao_matematica_reduzida',1,'p_expressao_matematica_reduzida','analiseSintatica.py',332),
  ('expressao_matematica_reduzida -> assign_div','expressao_matematica_reduzida',1,'p_expressao_matematica_reduzida','analiseSintatica.py',333),
  ('assign_plus -> ID PLUS EQUALS expressao','assign_plus',4,'p_assign_plus','analiseSintatica.py',337),
  ('assign_minus -> ID MINUS EQUALS expressao','assign_minus',4,'p_assign_minus','analiseSintatica.py',341),
  ('assign_mult -> ID TIMES EQUALS expressao','assign_mult',4,'p_assign_mult','analiseSintatica.py',345),
  ('assign_div -> ID DIVISION EQUALS expressao','assign_div',4,'p_assign_div','analiseSintatica.py',349),
  ('declaracao -> lista_identificadores COLON EQUALS lista_valores','declaracao',4,'p_declaracao','analiseSintatica.py',353),
  ('chamadaFuncao -> ID BEG_PAREN lista_parametros END_PAREN','chamadaFuncao',4,'p_chamadaFuncao','analiseSintatica.py',360),
  ('lista_parametros -> lista_identificadores','lista_parametros',1,'p_lista_parametros','analiseSintatica.py',364),
  ('lista_parametros -> empty','lista_parametros',1,'p_lista_parametros','analiseSintatica.py',365),
  ('lista_identificadores -> lista_identificadores COMMA ID','lista_identificadores',3,'p_lista_identificadores','analiseSintatica.py',372),
  ('lista_identificadores -> ID','lista_identificadores',1,'p_lista_identificadores','analiseSintatica.py',373),
  ('lista_valores -> lista_valores COMMA expressao','lista_valores',3,'p_lista_valores','analiseSintatica.py',380),
  ('lista_valores -> expressao','lista_valores',1,'p_lista_valores','analiseSintatica.py',381),
]
